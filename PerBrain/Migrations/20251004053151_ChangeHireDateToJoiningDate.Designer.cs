// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerBrain.Model;

#nullable disable

namespace PerBrain.Migrations
{
    [DbContext(typeof(PerBrainDbContext))]
    [Migration("20251004053151_ChangeHireDateToJoiningDate")]
    partial class ChangeHireDateToJoiningDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PerBrain.Model.Countries.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CapitalCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("PerBrain.Model.Permissions.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Module")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PermissionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PermissionId");

                    b.HasIndex("PermissionCode")
                        .IsUnique();

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4862),
                            Description = "Ability to view user list and details",
                            IsActive = true,
                            Module = "Users",
                            PermissionCode = "USERS_VIEW",
                            PermissionName = "View Users"
                        },
                        new
                        {
                            PermissionId = 2,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4863),
                            Description = "Ability to create new users",
                            IsActive = true,
                            Module = "Users",
                            PermissionCode = "USERS_CREATE",
                            PermissionName = "Create Users"
                        },
                        new
                        {
                            PermissionId = 3,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4865),
                            Description = "Ability to edit existing users",
                            IsActive = true,
                            Module = "Users",
                            PermissionCode = "USERS_EDIT",
                            PermissionName = "Edit Users"
                        },
                        new
                        {
                            PermissionId = 4,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4866),
                            Description = "Ability to delete users",
                            IsActive = true,
                            Module = "Users",
                            PermissionCode = "USERS_DELETE",
                            PermissionName = "Delete Users"
                        },
                        new
                        {
                            PermissionId = 5,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4867),
                            Description = "Ability to access the main dashboard",
                            IsActive = true,
                            Module = "Dashboard",
                            PermissionCode = "DASHBOARD_VIEW",
                            PermissionName = "View Dashboard"
                        },
                        new
                        {
                            PermissionId = 6,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4869),
                            Description = "Ability to view reports",
                            IsActive = true,
                            Module = "Reports",
                            PermissionCode = "REPORTS_VIEW",
                            PermissionName = "View Reports"
                        },
                        new
                        {
                            PermissionId = 7,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4870),
                            Description = "Ability to create and manage roles and permissions",
                            IsActive = true,
                            Module = "Administration",
                            PermissionCode = "ROLES_MANAGE",
                            PermissionName = "Manage Roles"
                        },
                        new
                        {
                            PermissionId = 8,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4871),
                            Description = "Ability to view teams",
                            IsActive = true,
                            Module = "Teams",
                            PermissionCode = "TEAMS_VIEW",
                            PermissionName = "View Teams"
                        },
                        new
                        {
                            PermissionId = 9,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(4873),
                            Description = "Ability to view workspaces",
                            IsActive = true,
                            Module = "Workspaces",
                            PermissionCode = "WORKSPACES_VIEW",
                            PermissionName = "View Workspaces"
                        });
                });

            modelBuilder.Entity("PerBrain.Model.RolePermissions.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"));

                    b.Property<int?>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RolePermissionId = 1,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5078),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 2,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5079),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 3,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5080),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 4,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5081),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 5,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5082),
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 6,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5083),
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 7,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5084),
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 8,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5085),
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 9,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5086),
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 10,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5088),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 11,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5089),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 12,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5090),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 13,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5091),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 14,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5092),
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 15,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5093),
                            PermissionId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 16,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5094),
                            PermissionId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 17,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5095),
                            PermissionId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 18,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5096),
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            RolePermissionId = 19,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5097),
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            RolePermissionId = 20,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5098),
                            PermissionId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            RolePermissionId = 21,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5099),
                            PermissionId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            RolePermissionId = 22,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5100),
                            PermissionId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            RolePermissionId = 23,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5101),
                            PermissionId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            RolePermissionId = 24,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5102),
                            PermissionId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            RolePermissionId = 25,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5103),
                            PermissionId = 5,
                            RoleId = 4
                        },
                        new
                        {
                            RolePermissionId = 26,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5104),
                            PermissionId = 8,
                            RoleId = 4
                        },
                        new
                        {
                            RolePermissionId = 27,
                            AssignedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5106),
                            PermissionId = 5,
                            RoleId = 5
                        });
                });

            modelBuilder.Entity("PerBrain.Model.Roles.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5003),
                            Description = "Full system access with all permissions",
                            IsActive = true,
                            RoleName = "Super Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5007),
                            Description = "Administrative access without role management",
                            IsActive = true,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5009),
                            Description = "Management level access to users and reports",
                            IsActive = true,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 4,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5010),
                            Description = "Team leadership access",
                            IsActive = true,
                            RoleName = "Team Lead"
                        },
                        new
                        {
                            RoleId = 5,
                            CreatedDate = new DateTime(2025, 10, 4, 5, 31, 51, 118, DateTimeKind.Utc).AddTicks(5057),
                            Description = "Basic user access to dashboard and assigned areas",
                            IsActive = true,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("PerBrain.Model.StatesProvinces.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateProvinceId"));

                    b.Property<string>("CapitalCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateProvinceId");

                    b.ToTable("StatesProvinces");
                });

            modelBuilder.Entity("PerBrain.Model.UserProfiles.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AlternatePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Manager")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("PerBrain.Model.UserRoles.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int?>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("PerBrain.Model.RolePermissions.RolePermission", b =>
                {
                    b.HasOne("PerBrain.Model.Permissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerBrain.Model.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PerBrain.Model.UserRoles.UserRole", b =>
                {
                    b.HasOne("PerBrain.Model.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerBrain.Model.UserProfiles.UserProfile", "UserProfile")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("PerBrain.Model.Permissions.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("PerBrain.Model.Roles.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PerBrain.Model.UserProfiles.UserProfile", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
